// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AntonBezemskiy/gophermart/internal/repositories (interfaces: Authenticator,OrderManager,BalanceManager,WithdrawHandler,WithdrawalsHandler,RetryHandler)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	repositories "github.com/AntonBezemskiy/gophermart/internal/repositories"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthenticator is a mock of Authenticator interface.
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator.
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance.
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthenticator) Authenticate(arg0 context.Context, arg1, arg2 string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthenticatorMockRecorder) Authenticate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticator)(nil).Authenticate), arg0, arg1, arg2)
}

// Register mocks base method.
func (m *MockAuthenticator) Register(arg0 context.Context, arg1, arg2 string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Register indicates an expected call of Register.
func (mr *MockAuthenticatorMockRecorder) Register(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthenticator)(nil).Register), arg0, arg1, arg2)
}

// MockOrderManager is a mock of OrderManager interface.
type MockOrderManager struct {
	ctrl     *gomock.Controller
	recorder *MockOrderManagerMockRecorder
}

// MockOrderManagerMockRecorder is the mock recorder for MockOrderManager.
type MockOrderManagerMockRecorder struct {
	mock *MockOrderManager
}

// NewMockOrderManager creates a new mock instance.
func NewMockOrderManager(ctrl *gomock.Controller) *MockOrderManager {
	mock := &MockOrderManager{ctrl: ctrl}
	mock.recorder = &MockOrderManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderManager) EXPECT() *MockOrderManagerMockRecorder {
	return m.recorder
}

// GetOrders mocks base method.
func (m *MockOrderManager) GetOrders(arg0 context.Context, arg1 string) ([]repositories.Order, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", arg0, arg1)
	ret0, _ := ret[0].([]repositories.Order)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderManagerMockRecorder) GetOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderManager)(nil).GetOrders), arg0, arg1)
}

// GetOrdersForAccrual mocks base method.
func (m *MockOrderManager) GetOrdersForAccrual(arg0 context.Context) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersForAccrual", arg0)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersForAccrual indicates an expected call of GetOrdersForAccrual.
func (mr *MockOrderManagerMockRecorder) GetOrdersForAccrual(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersForAccrual", reflect.TypeOf((*MockOrderManager)(nil).GetOrdersForAccrual), arg0)
}

// Load mocks base method.
func (m *MockOrderManager) Load(arg0 context.Context, arg1, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockOrderManagerMockRecorder) Load(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockOrderManager)(nil).Load), arg0, arg1, arg2)
}

// UpdateOrder mocks base method.
func (m *MockOrderManager) UpdateOrder(arg0 context.Context, arg1, arg2 string, arg3 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderManagerMockRecorder) UpdateOrder(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderManager)(nil).UpdateOrder), arg0, arg1, arg2, arg3)
}

// UpdateOrderTX mocks base method.
func (m *MockOrderManager) UpdateOrderTX(arg0 context.Context, arg1 []repositories.AccrualData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderTX", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderTX indicates an expected call of UpdateOrderTX.
func (mr *MockOrderManagerMockRecorder) UpdateOrderTX(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderTX", reflect.TypeOf((*MockOrderManager)(nil).UpdateOrderTX), arg0, arg1)
}

// MockBalanceManager is a mock of BalanceManager interface.
type MockBalanceManager struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceManagerMockRecorder
}

// MockBalanceManagerMockRecorder is the mock recorder for MockBalanceManager.
type MockBalanceManagerMockRecorder struct {
	mock *MockBalanceManager
}

// NewMockBalanceManager creates a new mock instance.
func NewMockBalanceManager(ctrl *gomock.Controller) *MockBalanceManager {
	mock := &MockBalanceManager{ctrl: ctrl}
	mock.recorder = &MockBalanceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceManager) EXPECT() *MockBalanceManagerMockRecorder {
	return m.recorder
}

// GetBalance mocks base method.
func (m *MockBalanceManager) GetBalance(arg0 context.Context, arg1 string) (repositories.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0, arg1)
	ret0, _ := ret[0].(repositories.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockBalanceManagerMockRecorder) GetBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockBalanceManager)(nil).GetBalance), arg0, arg1)
}

// MockWithdrawHandler is a mock of WithdrawHandler interface.
type MockWithdrawHandler struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawHandlerMockRecorder
}

// MockWithdrawHandlerMockRecorder is the mock recorder for MockWithdrawHandler.
type MockWithdrawHandlerMockRecorder struct {
	mock *MockWithdrawHandler
}

// NewMockWithdrawHandler creates a new mock instance.
func NewMockWithdrawHandler(ctrl *gomock.Controller) *MockWithdrawHandler {
	mock := &MockWithdrawHandler{ctrl: ctrl}
	mock.recorder = &MockWithdrawHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawHandler) EXPECT() *MockWithdrawHandlerMockRecorder {
	return m.recorder
}

// Withdraw mocks base method.
func (m *MockWithdrawHandler) Withdraw(arg0 context.Context, arg1, arg2 string, arg3 float64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockWithdrawHandlerMockRecorder) Withdraw(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockWithdrawHandler)(nil).Withdraw), arg0, arg1, arg2, arg3)
}

// MockWithdrawalsHandler is a mock of WithdrawalsHandler interface.
type MockWithdrawalsHandler struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawalsHandlerMockRecorder
}

// MockWithdrawalsHandlerMockRecorder is the mock recorder for MockWithdrawalsHandler.
type MockWithdrawalsHandlerMockRecorder struct {
	mock *MockWithdrawalsHandler
}

// NewMockWithdrawalsHandler creates a new mock instance.
func NewMockWithdrawalsHandler(ctrl *gomock.Controller) *MockWithdrawalsHandler {
	mock := &MockWithdrawalsHandler{ctrl: ctrl}
	mock.recorder = &MockWithdrawalsHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawalsHandler) EXPECT() *MockWithdrawalsHandlerMockRecorder {
	return m.recorder
}

// GetWithdrawals mocks base method.
func (m *MockWithdrawalsHandler) GetWithdrawals(arg0 context.Context, arg1 string) ([]repositories.Withdrawals, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", arg0, arg1)
	ret0, _ := ret[0].([]repositories.Withdrawals)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockWithdrawalsHandlerMockRecorder) GetWithdrawals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockWithdrawalsHandler)(nil).GetWithdrawals), arg0, arg1)
}

// MockRetryHandler is a mock of RetryHandler interface.
type MockRetryHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRetryHandlerMockRecorder
}

// MockRetryHandlerMockRecorder is the mock recorder for MockRetryHandler.
type MockRetryHandlerMockRecorder struct {
	mock *MockRetryHandler
}

// NewMockRetryHandler creates a new mock instance.
func NewMockRetryHandler(ctrl *gomock.Controller) *MockRetryHandler {
	mock := &MockRetryHandler{ctrl: ctrl}
	mock.recorder = &MockRetryHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetryHandler) EXPECT() *MockRetryHandlerMockRecorder {
	return m.recorder
}

// AddRetryPeriod mocks base method.
func (m *MockRetryHandler) AddRetryPeriod(arg0 context.Context, arg1 string, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRetryPeriod", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRetryPeriod indicates an expected call of AddRetryPeriod.
func (mr *MockRetryHandlerMockRecorder) AddRetryPeriod(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRetryPeriod", reflect.TypeOf((*MockRetryHandler)(nil).AddRetryPeriod), arg0, arg1, arg2)
}

// GetRetryPeriod mocks base method.
func (m *MockRetryHandler) GetRetryPeriod(arg0 context.Context, arg1 string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetryPeriod", arg0, arg1)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRetryPeriod indicates an expected call of GetRetryPeriod.
func (mr *MockRetryHandlerMockRecorder) GetRetryPeriod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetryPeriod", reflect.TypeOf((*MockRetryHandler)(nil).GetRetryPeriod), arg0, arg1)
}
